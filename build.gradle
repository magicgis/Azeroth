apply plugin: 'idea'
apply plugin: 'eclipse'


group = "com.azeroth"
version = qualifyVersionIfNecessary(version)

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
    mavenCentral()
}





task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}

configurations {
    moreLibs
}
repositories {
    flatDir { dirs  "libs"}
    mavenCentral()
}

allprojects {

    ext.springVersion          = "4.1.2.RELEASE"
    ext.mybatisVersion         = "3.2.8"
    ext.mybatispringVersion    = "1.2.2"
    ext.mybatisgeneratorVer    = "1.3.2"
    ext.aspectjVersion         = "1.8.2"
    ext.cglibVersion           = "3.1"
    ext.druidVersion           = "1.0.10"
    ext.fastjsonVersion        = "1.2.2"
    ext.shiroVersion           = "1.2.3"
    ext.slf4jVersion           = "2.1"
    ext.log4jVersion           = "2.1"
    ext.commonslang3Version    = "3.3.2"
    ext.commonsioVersion       = "2.4"
    ext.commbeanutilsVersion   = "1.9.2"
    ext.commfileuploadVersion  = "1.3.1"
    ext.commonsloggingVersion  = "1.2"
    ext.servletapiVersion      = "3.1.0"
    ext.jstlVersion            = "1.2"
    ext.standardVersion        = "1.1.2"
    ext.springRedisVersion     = "1.4.1.RELEASE"
    ext.jedisVersion           = "2.6.1"
    ext.dubboVersion           = "2.5.3"

}

subprojects {
    apply plugin: 'java'

    group = "com.mucoo"
    version = qualifyVersionIfNecessary(version)

    compileJava {
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies{
        compile "org.apache.logging.log4j:log4j-api:${slf4jVersion}"
        compile "org.apache.logging.log4j:log4j-core:${slf4jVersion}"
        compile "org.apache.commons:commons-lang3:${commonslang3Version}"
        compile "commons-io:commons-io:${commonsioVersion}"
        compile "commons-beanutils:commons-beanutils:${commbeanutilsVersion}"
        compile "commons-fileupload:commons-fileupload:${commfileuploadVersion}"
        compile "commons-logging:commons-logging:${commonsloggingVersion}"
    }

    task createJavaProject << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs()}
    }
}

configure(subprojects.findAll {it.name != 'core'}) {
    apply plugin: 'war'

    dependencies {
        compile "org.springframework:spring-core:${springVersion}"
        compile "org.springframework:spring-beans:${springVersion}"
        compile "org.springframework:spring-context:${springVersion}"
        compile "org.springframework:spring-context-support:${springVersion}"
        compile "org.springframework:spring-aop:${springVersion}"
        compile "org.springframework:spring-tx:${springVersion}"
        compile "org.springframework:spring-orm:${springVersion}"
        compile "org.springframework:spring-jdbc:${springVersion}"
        compile "org.springframework:spring-web:${springVersion}"
        compile "org.springframework:spring-webmvc:${springVersion}"
        compile "org.springframework:spring-aspects:${springVersion}"
        compile "org.springframework:spring-expression:${springVersion}"
        compile "org.mybatis:mybatis:${mybatisVersion}"
        compile "org.mybatis:mybatis-spring:${mybatispringVersion}"
        compile "org.mybatis.generator:mybatis-generator:${mybatisgeneratorVer}"
        runtime "org.aspectj:aspectjrt:${aspectjVersion}"
        compile "org.aspectj:aspectjweaver:${aspectjVersion}"
        runtime "cglib:cglib:${cglibVersion}"
        compile "com.alibaba:druid:${druidVersion}"
        compile "com.alibaba:fastjson:${fastjsonVersion}"
        compile "org.springframework.data:spring-data-redis:${springRedisVersion}"
        compile "redis.clients:jedis:${jedisVersion}"
        compile "com.alibaba:dubbo:${dubboVersion}"
        compile "javax.servlet:javax.servlet-api:${servletapiVersion}"
        runtime "javax.servlet:jstl:${jstlVersion}"
        compile "taglibs:standard:${standardVersion}"
    }


    task createWebProject(dependsOn: 'createJavaProject') << {
        def webAppDir = file("$webAppDirName")
        webAppDir.mkdirs()
    }

}

project("core") {
    group = "com.mucoo.core"
}


project("shire") {
    group = "com.mucoo.shire"

    dependencies {
        compile(project(":core"))
        compile "org.apache.shiro:shiro-core:${shiroVersion}"
        compile "org.apache.shiro:shiro-web:${shiroVersion}"
        compile "org.apache.shiro:shiro-spring:${shiroVersion}"
        compile "org.apache.shiro:shiro-ehcache:${shiroVersion}"
        compile "org.apache.shiro:shiro-aspectj:${shiroVersion}"
    }

}


project("webs") {
    group = "com.mucoo.webs"

    dependencies{
        compile(project(":core"))
    }

}


def qualifyVersionIfNecessary(version) {
    if (rootProject.hasProperty("BRANCH_NAME")) {
        def qualifier = rootProject.getProperty("BRANCH_NAME")
        if (qualifier.startsWith("SPR-")) {
            return version.replace('BUILD', qualifier)
        }
    }
    return version
}

