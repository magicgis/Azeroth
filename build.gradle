apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'war'

group = "com.azeroth"
version = qualifyVersionIfNecessary(version)

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    ext.springVersion          = "4.2.4.RELEASE"
    ext.mybatisVersion         = "3.3.1"
    ext.mybatispringVersion    = "1.2.4"
    ext.mybatisgeneratorVer    = "1.3.2"
    ext.aspectjVersion         = "1.8.8"
    ext.druidVersion           = "1.0.17"
    ext.fastjsonVersion        = "1.2.7"
    ext.shiroVersion           = "1.2.4"
    ext.log4jVersion           = "2.5"
    ext.commonslang3Version    = "3.4"
    ext.commonsioVersion       = "2.4"
    ext.commbeanutilsVersion   = "1.9.2"
    ext.commfileuploadVersion  = "1.3.1"
    ext.servletapiVersion      = "3.1.0"
    ext.jstlVersion            = "1.2"
    ext.standardVersion        = "1.1.2"
}

dependencies{
    compile "org.springframework:spring-core:${springVersion}"
    compile "org.springframework:spring-beans:${springVersion}"
    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-context-support:${springVersion}"
    compile "org.springframework:spring-aop:${springVersion}"
    compile "org.springframework:spring-tx:${springVersion}"
    compile "org.springframework:spring-orm:${springVersion}"
    compile "org.springframework:spring-jdbc:${springVersion}"
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.springframework:spring-aspects:${springVersion}"
    compile "org.springframework:spring-expression:${springVersion}"
    compile "org.mybatis:mybatis:${mybatisVersion}"
    compile "org.mybatis:mybatis-spring:${mybatispringVersion}"
    compile "org.mybatis.generator:mybatis-generator:${mybatisgeneratorVer}"
    runtime "org.aspectj:aspectjrt:${aspectjVersion}"
    compile "org.aspectj:aspectjweaver:${aspectjVersion}"
    compile "com.alibaba:druid:${druidVersion}"
    compile "com.alibaba:fastjson:${fastjsonVersion}"
    compile "javax.servlet:javax.servlet-api:${servletapiVersion}"
    runtime "javax.servlet:jstl:${jstlVersion}"
    compile "taglibs:standard:${standardVersion}"
    compile "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    compile "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    compile "org.apache.commons:commons-lang3:${commonslang3Version}"
    compile "commons-io:commons-io:${commonsioVersion}"
    compile "commons-beanutils:commons-beanutils:${commbeanutilsVersion}"
    compile "commons-fileupload:commons-fileupload:${commfileuploadVersion}"
    compile "org.apache.shiro:shiro-core:${shiroVersion}"
    compile "org.apache.shiro:shiro-web:${shiroVersion}"
    compile "org.apache.shiro:shiro-spring:${shiroVersion}"
    compile "org.apache.shiro:shiro-ehcache:${shiroVersion}"
    compile "org.apache.shiro:shiro-aspectj:${shiroVersion}"
}

task createJavaProject << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs()}
}


task createWebProject(dependsOn: 'createJavaProject') << {
    def webAppDir = file("$webAppDirName")
    webAppDir.mkdirs()
}


def qualifyVersionIfNecessary(version) {
    if (rootProject.hasProperty("BRANCH_NAME")) {
        def qualifier = rootProject.getProperty("BRANCH_NAME")
        if (qualifier.startsWith("SPR-")) {
            return version.replace('BUILD', qualifier)
        }
    }
    return version
}

